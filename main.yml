---
- name: Generate AAP HTML Inventory and Sync with Confluence
  hosts: localhost
  gather_facts: false

  vars:
    confluence_base_url: "https://nareshyadavmusic.atlassian.net/wiki"
    confluence_space: "aap"
    page_title: "AAP Inventory - all"
    confluence_user: "nareshyadav.music@gmail.com"
    confluence_token: "{{ lookup('env', 'CONFLUENCE_API_TOKEN') }}"  # Recommended: store in AAP credential

  tasks:

    - name: Determine safe inventory group
      set_fact:
        safe_group_name: "{{ target_group if (target_group in groups) else 'all' }}"
        host_list: "{{ groups[target_group] | default(groups['all']) | default([]) }}"
      run_once: true

    - name: Build HTML table with inventory facts
      set_fact:
        table_html: "{{ lookup('template', 'inventory_table.j2') }}"
      vars:
        group_name: "{{ safe_group_name }}"
        group_hosts: "{{ host_list }}"
      run_once: true

    - name: Initialize Confluence tracking variables
      set_fact:
        existing_page_id: ""
        existing_version: 0

    - name: Check if Confluence page already exists
      uri:
        url: "{{ confluence_base_url }}/rest/api/content?title={{ page_title | urlencode }}&spaceKey={{ confluence_space }}"
        method: GET
        user: "{{ confluence_user }}"
        password: "{{ confluence_token }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: confluence_page_check

    - name: Set existing page ID if found
      set_fact:
        existing_page_id: "{{ confluence_page_check.json.results[0].id | default('') }}"
      when: confluence_page_check.json.results | length > 0

    - name: Fetch current version if page exists
      uri:
        url: "{{ confluence_base_url }}/rest/api/content/{{ existing_page_id }}?expand=version"
        method: GET
        user: "{{ confluence_user }}"
        password: "{{ confluence_token }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: confluence_version_info
      when: existing_page_id | length > 0

    - name: Set existing version fact
      set_fact:
        existing_version: "{{ confluence_version_info.json.version.number | default(0) }}"
      when: existing_page_id | length > 0

    - name: Debug Confluence version info
      debug:
        msg: "Updating Confluence page {{ existing_page_id }} to version {{ (existing_version | int) + 1 }}"
      when: existing_page_id | length > 0

    - name: Create or Update Confluence page
      uri:
        url: >-
          {{ confluence_base_url }}/rest/api/content{{ '/' + existing_page_id if existing_page_id | length > 0 else '' }}
        method: "{{ 'PUT' if existing_page_id | length > 0 else 'POST' }}"
        user: "{{ confluence_user }}"
        password: "{{ confluence_token }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body: >-
          {{
            {
              "id": existing_page_id,
              "type": "page",
              "title": page_title,
              "space": {"key": confluence_space},
              "body": {
                "storage": {
                  "value": table_html,
                  "representation": "storage"
                }
              },
              "version": {"number": (existing_version | int) + 1}
            }
            if existing_page_id | length > 0 else
            {
              "type": "page",
              "title": page_title,
              "space": {"key": confluence_space},
              "body": {
                "storage": {
                  "value": table_html,
                  "representation": "storage"
                }
              }
            }
          }}
        status_code: [200, 201]
        validate_certs: true
      register: confluence_update

    - name: Print Confluence result
      debug:
        var: confluence_update.status
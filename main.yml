---
- name: Check host reachability and gather facts
  hosts: "{{ target_group }}"
  gather_facts: false
  ignore_unreachable: true
  tasks:
    - name: Ping test
      ansible.builtin.ping:
      register: ping_result
      ignore_errors: true

    - name: Set reachability status
      ansible.builtin.set_fact:
        reachable_status: "{{ 'reachable' if ping_result.ping is defined else 'unreachable' }}"

- name: Gather facts from reachable hosts
  hosts: "{{ target_group }}"
  gather_facts: yes
  ignore_unreachable: true
  tasks:
    - name: Skip unreachable hosts
      ansible.builtin.meta: end_host
      when: hostvars[inventory_hostname].reachable_status == 'unreachable'

- name: Update Confluence page with latest inventory
  hosts: localhost
  gather_facts: false
  vars:
    confluence_base_url: "https://nareshyadavmusic.atlassian.net/wiki"
    confluence_space: "aap"
    page_title: "AAP Inventory - all"
    safe_group_name: "{{ target_group }}"

  tasks:
    - name: Load Confluence credentials
      ansible.builtin.set_fact:
        confluence_user: "{{ lookup('env', 'CONFLUENCE_USER') }}"
        confluence_token: "{{ lookup('env', 'CONFLUENCE_TOKEN') }}"

    - name: Check if Confluence page exists
      ansible.builtin.uri:
        url: "{{ confluence_base_url }}/rest/api/content"
        method: GET
        user: "{{ confluence_user }}"
        password: "{{ confluence_token }}"
        force_basic_auth: true
        return_content: true
        status_code: [200, 201]
        params:
          title: "{{ page_title }}"
          spaceKey: "{{ confluence_space }}"
          expand: "body.storage,version"
      register: confluence_page_check

    - name: Extract existing content if available
      ansible.builtin.set_fact:
        existing_page_id: "{{ confluence_page_check.json.results[0].id | default('') }}"
        existing_version: "{{ confluence_page_check.json.results[0].version.number | default(0) }}"
        existing_content: "{{ confluence_page_check.json.results[0].body.storage.value | default('') }}"
      when: confluence_page_check.json.results | length > 0

    - name: Build new HTML section for target group
      ansible.builtin.set_fact:
        new_section_html: >-
          <!-- START: {{ safe_group_name }} -->
          {{ lookup('template', 'inventory_table_confluence.j2') | trim }}
          <!-- END: {{ safe_group_name }} -->

    - name: Replace existing section for this group if found
      ansible.builtin.set_fact:
        updated_content: >-
          {{
            (existing_content | default(''))
            | regex_replace(
                '<!-- START: ' ~ safe_group_name ~ ' -->[\\s\\S]*?<!-- END: ' ~ safe_group_name ~ ' -->',
                new_section_html
              )
          }}
      when: "existing_content is search('<!-- START: ' ~ safe_group_name ~ ' -->')"

    - name: Append section if not found (first-time addition)
      ansible.builtin.set_fact:
        updated_content: "{{ (existing_content | default('')) + '\n<hr/>\n' + new_section_html }}"
      when: "existing_content is not search('<!-- START: ' ~ safe_group_name ~ ' -->')"

    - name: Prepare Confluence update body
      ansible.builtin.set_fact:
        confluence_body: >-
          {{
            {
              "id": existing_page_id,
              "type": "page",
              "title": page_title,
              "space": {"key": confluence_space},
              "version": {"number": (existing_version | int) + 1},
              "body": {
                "storage": {
                  "value": updated_content,
                  "representation": "storage"
                }
              }
            }
          }}

    - name: Create Confluence page if not exists
      ansible.builtin.uri:
        url: "{{ confluence_base_url }}/rest/api/content"
        method: POST
        user: "{{ confluence_user }}"
        password: "{{ confluence_token }}"
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
        body_format: json
        body: >-
          {{
            {
              "type": "page",
              "title": page_title,
              "space": {"key": confluence_space},
              "body": {
                "storage": {
                  "value": new_section_html,
                  "representation": "storage"
                }
              }
            }
          }}
        status_code: [200, 201]
      when: existing_page_id | length == 0
      ignore_errors: true
      failed_when: false

    - name: Update Confluence page (replace mode)
      ansible.builtin.uri:
        url: "{{ confluence_base_url }}/rest/api/content/{{ existing_page_id }}"
        method: PUT
        user: "{{ confluence_user }}"
        password: "{{ confluence_token }}"
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
        body_format: json
        body: "{{ confluence_body }}"
        status_code: [200, 201]
      when: existing_page_id | length > 0
      ignore_errors: true
      failed_when: false